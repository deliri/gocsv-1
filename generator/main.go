package main

import (
	"os"
	"encoding/csv"
	"golang.org/x/text/transform"
	"golang.org/x/text/encoding/simplifiedchinese"
	"errors"
	"fmt"
	"strings"
	"log"
	"path/filepath"
	"flag"
	"io/ioutil"
)


var csvfile = flag.String("csvfile", "", "exmaple: data/demo.csv")
var outfile = flag.String("outfile", "", "exmaple: data/demo.go")
var packname = flag.String("packname", "", "exmaple: data")
var utf8 = flag.Bool("utf8", false, "utf8 is: true|false")

func main() {
	flag.Parse()
	if *csvfile == "" || *packname == ""{
		flag.Usage()
		return
	}
	err := write(*csvfile, *outfile, *packname, *utf8)
	if err != nil {
		log.Print(err)
	}else{
		log.Printf("generator success!", *outfile)
	}
}

//Goods goods struct for csv
type Goods struct {
	ID   int `csv:"id"`        //id => ID
	Name string                // name => Name (default, first letter lowercase)
	Cost float64 `csv:"price"` // rename price => cost
}

func write(file string, outfile string, packname string, isUtf8 bool) error {
	//open file
	fi, err := os.Open(file)
	if err != nil {
		return err
	}
	defer fi.Close()
	//get reader
	var reader *csv.Reader
	if isUtf8 {
		reader = csv.NewReader(fi)
	} else {
		//transform gbk to utf8
		r := transform.NewReader(fi, simplifiedchinese.GBK.NewDecoder())
		reader = csv.NewReader(r)
	}

	lines, err := reader.ReadAll()
	if err != nil {
		return errors.New(fmt.Sprintf("read error: %v", err))
	}
	lineNum := len(lines)
	if (lineNum < 3) {
		return errors.New(fmt.Sprintf("Csv %v is invalid"))
	}
	names, fields, kinds := lines[0], lines[1], lines[2]
	fieldNum := len(names)
	filename := filename(file)
	code := fmt.Sprintf("// Code generated by github.com/foolin/gocsv.\n// source: %v\n// DO NOT EDIT! \n\npackage %v\n\ntype %v struct {\n", filepath.Base(file), packname, upper(filename))
	for j := 0; j < fieldNum; j++ {
		name := names[j]
		field := fields[j]
		kind := kinds[j]
		if kind == "float" {
			kind = "float64"
		}
		code = code + fmt.Sprintf("\t%v %v `csv:\"%v\"` //%v\n", upper(field), kind, field, name)
	}
	code = code + "}\n"
	fmt.Printf(code)
	if outfile == ""{
		outfile = strings.Replace(file, ".csv", ".go", -1)
	}
	err = ioutil.WriteFile(outfile, []byte(code), 0777)
	if err != nil {
		return err
	}
	log.Printf("write file: %v", outfile)
	return nil
}

func upper(str string) string {
	if str == ""{
		return str
	}
	return strings.ToUpper(str[:1]) + str[1:]
}

func filename(filename string) string {
	name := filepath.Base(filename)
	return strings.TrimSuffix(name, filepath.Ext(filename))
}